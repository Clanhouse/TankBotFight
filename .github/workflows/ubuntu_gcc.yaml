name: Ubuntu_gcc11
on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install deps
      run: |
        echo "deb http://mirrors.kernel.org/ubuntu hirsute main universe" | sudo tee /etc/apt/sources.list.d/gcc-11.list 
        sudo apt-get update
        sudo apt-get install -y gcc-11 g++-11 libsfml-dev xvfb clang-format libprotobuf-dev

    - name: Check formatting
      run: |
        clang-format --version  
        find src test -regex '.*\.\(cpp\|hpp\|cc\|cxx\)' -exec clang-format --dry-run --Werror {} \;

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      env: 
        CC: gcc-11
        CXX: g++-11
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      env:
          CTEST_OUTPUT_ON_FAILURE: 1
          DISPLAY: :0
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
          Xvfb &
          sleep 5
          ctest -C $BUILD_TYPE 
          pkill -9 Xvfb

